//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrderManagementSystem.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OrdersModelEntities : DbContext
    {
        public OrdersModelEntities()
            : base("name=OrdersModelEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
    
        public virtual ObjectResult<getOrderDetails_Result> getOrderDetails(Nullable<int> id, Nullable<int> userRole)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("userRole", userRole) :
                new ObjectParameter("userRole", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getOrderDetails_Result>("getOrderDetails", idParameter, userRoleParameter);
        }
    
        public virtual int InsertOrder(string addr, Nullable<int> prodId)
        {
            var addrParameter = addr != null ?
                new ObjectParameter("addr", addr) :
                new ObjectParameter("addr", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("prodId", prodId) :
                new ObjectParameter("prodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrder", addrParameter, prodIdParameter);
        }
    }
}
